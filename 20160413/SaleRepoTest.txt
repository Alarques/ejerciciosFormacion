package com.indra.formacio;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

import com.indra.formacio.dao.CustomerRepository;
import com.indra.formacio.dao.ProductRepository;
import com.indra.formacio.dao.SaleRepository;
import com.indra.formacio.model.Customer;
import com.indra.formacio.model.Product;
import com.indra.formacio.model.Sale;
import com.indra.formacio.model.SaleKey;

import junit.framework.TestCase;

@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(locations = { "/applicationContext.xml" })
public class SaleRepoTest extends TestCase {

	SimpleDateFormat sdf = new SimpleDateFormat("dd/mm/yyyy");
	
	@Autowired
	CustomerRepository cRepo;
	@Autowired
	ProductRepository pRepo;
	@Autowired
	SaleRepository sRepo;
	
	@Test
	public void testCrud() throws ParseException {
		Product p = new Product();
		p.setName("Test Product");;
		Customer c = new Customer();
		c.setName("Test");
		c.setSurname("Test Surname");
		
		Sale s = new Sale();
		s.setSaleKey(new SaleKey(p.getId(), c.getId()));
		s.setSaleDate(sdf.parse("13/04/2016"));
		
		sRepo.save(s);
		
		assertNotNull(s.getSaleKey());
		
		List<Product> resProduct = sRepo.findByProduct(p.getId());
		assertFalse(resProduct.isEmpty());
		
		List<Customer> resCustomer = sRepo.findByCustomer(c.getId());
		assertFalse(resCustomer.isEmpty());
		
		Product pRes = resProduct.get(0);
		Customer cRes = resCustomer.get(0);
		
		assertEquals(p.getName(), pRes.getName());
		assertEquals(c.getName(), cRes.getName());
		
		assertEquals(a.getId(), b.getId());
		assertEquals(a.getName(), b.getName());
		assertEquals(a.getSurname(), b.getSurname());
		assertEquals(a.getPercentDate(), b.getPercentDate());
		assertEquals(a.getPercentProduct(), b.getPercentProduct());
		assertEquals(a.getEmployee().getId(), b.getEmployee().getId());
		System.out.println(a.getEmployee().equals( b.getEmployee()));
		assertEquals(a.getEmployee(), b.getEmployee());
		assertEquals(a.hashCode(), b.hashCode());
		assertEquals(a,b);
	}

}